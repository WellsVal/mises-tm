// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: misestm/v1beta1/rest_query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RestQueryDidRequest struct {
	MisesId string `protobuf:"bytes,1,opt,name=mises_id,json=misesId,proto3" json:"mises_id,omitempty"`
}

func (m *RestQueryDidRequest) Reset()         { *m = RestQueryDidRequest{} }
func (m *RestQueryDidRequest) String() string { return proto.CompactTextString(m) }
func (*RestQueryDidRequest) ProtoMessage()    {}
func (*RestQueryDidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{0}
}
func (m *RestQueryDidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryDidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryDidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryDidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryDidRequest.Merge(m, src)
}
func (m *RestQueryDidRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryDidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryDidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryDidRequest proto.InternalMessageInfo

func (m *RestQueryDidRequest) GetMisesId() string {
	if m != nil {
		return m.MisesId
	}
	return ""
}

type RestQueryDidResponse struct {
	DidRegistry *DidRegistry `protobuf:"bytes,1,opt,name=didRegistry,proto3" json:"didRegistry,omitempty"`
}

func (m *RestQueryDidResponse) Reset()         { *m = RestQueryDidResponse{} }
func (m *RestQueryDidResponse) String() string { return proto.CompactTextString(m) }
func (*RestQueryDidResponse) ProtoMessage()    {}
func (*RestQueryDidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{1}
}
func (m *RestQueryDidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryDidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryDidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryDidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryDidResponse.Merge(m, src)
}
func (m *RestQueryDidResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryDidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryDidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryDidResponse proto.InternalMessageInfo

func (m *RestQueryDidResponse) GetDidRegistry() *DidRegistry {
	if m != nil {
		return m.DidRegistry
	}
	return nil
}

type RestQueryUserRequest struct {
	MisesUid string `protobuf:"bytes,1,opt,name=mises_uid,json=misesUid,proto3" json:"mises_uid,omitempty"`
}

func (m *RestQueryUserRequest) Reset()         { *m = RestQueryUserRequest{} }
func (m *RestQueryUserRequest) String() string { return proto.CompactTextString(m) }
func (*RestQueryUserRequest) ProtoMessage()    {}
func (*RestQueryUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{2}
}
func (m *RestQueryUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryUserRequest.Merge(m, src)
}
func (m *RestQueryUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryUserRequest proto.InternalMessageInfo

func (m *RestQueryUserRequest) GetMisesUid() string {
	if m != nil {
		return m.MisesUid
	}
	return ""
}

type RestQueryUserResponse struct {
	PubInfo *PublicUserInfo  `protobuf:"bytes,1,opt,name=pub_info,json=pubInfo,proto3" json:"pub_info,omitempty"`
	PriInfo *PrivateUserInfo `protobuf:"bytes,2,opt,name=pri_info,json=priInfo,proto3" json:"pri_info,omitempty"`
}

func (m *RestQueryUserResponse) Reset()         { *m = RestQueryUserResponse{} }
func (m *RestQueryUserResponse) String() string { return proto.CompactTextString(m) }
func (*RestQueryUserResponse) ProtoMessage()    {}
func (*RestQueryUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{3}
}
func (m *RestQueryUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryUserResponse.Merge(m, src)
}
func (m *RestQueryUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryUserResponse proto.InternalMessageInfo

func (m *RestQueryUserResponse) GetPubInfo() *PublicUserInfo {
	if m != nil {
		return m.PubInfo
	}
	return nil
}

func (m *RestQueryUserResponse) GetPriInfo() *PrivateUserInfo {
	if m != nil {
		return m.PriInfo
	}
	return nil
}

type RestQueryUserRelationRequest struct {
	MisesUid   string             `protobuf:"bytes,1,opt,name=mises_uid,json=misesUid,proto3" json:"mises_uid,omitempty"`
	Filter     string             `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *RestQueryUserRelationRequest) Reset()         { *m = RestQueryUserRelationRequest{} }
func (m *RestQueryUserRelationRequest) String() string { return proto.CompactTextString(m) }
func (*RestQueryUserRelationRequest) ProtoMessage()    {}
func (*RestQueryUserRelationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{4}
}
func (m *RestQueryUserRelationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryUserRelationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryUserRelationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryUserRelationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryUserRelationRequest.Merge(m, src)
}
func (m *RestQueryUserRelationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryUserRelationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryUserRelationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryUserRelationRequest proto.InternalMessageInfo

func (m *RestQueryUserRelationRequest) GetMisesUid() string {
	if m != nil {
		return m.MisesUid
	}
	return ""
}

func (m *RestQueryUserRelationRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *RestQueryUserRelationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type MisesID struct {
	MisesId string `protobuf:"bytes,1,opt,name=mises_id,json=misesId,proto3" json:"mises_id,omitempty"`
}

func (m *MisesID) Reset()         { *m = MisesID{} }
func (m *MisesID) String() string { return proto.CompactTextString(m) }
func (*MisesID) ProtoMessage()    {}
func (*MisesID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{5}
}
func (m *MisesID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MisesID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MisesID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MisesID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MisesID.Merge(m, src)
}
func (m *MisesID) XXX_Size() int {
	return m.Size()
}
func (m *MisesID) XXX_DiscardUnknown() {
	xxx_messageInfo_MisesID.DiscardUnknown(m)
}

var xxx_messageInfo_MisesID proto.InternalMessageInfo

func (m *MisesID) GetMisesId() string {
	if m != nil {
		return m.MisesId
	}
	return ""
}

type RestQueryUserRelationResponse struct {
	MisesList  []*MisesID          `protobuf:"bytes,1,rep,name=mises_list,json=misesList,proto3" json:"mises_list,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *RestQueryUserRelationResponse) Reset()         { *m = RestQueryUserRelationResponse{} }
func (m *RestQueryUserRelationResponse) String() string { return proto.CompactTextString(m) }
func (*RestQueryUserRelationResponse) ProtoMessage()    {}
func (*RestQueryUserRelationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{6}
}
func (m *RestQueryUserRelationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryUserRelationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryUserRelationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryUserRelationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryUserRelationResponse.Merge(m, src)
}
func (m *RestQueryUserRelationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryUserRelationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryUserRelationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryUserRelationResponse proto.InternalMessageInfo

func (m *RestQueryUserRelationResponse) GetMisesList() []*MisesID {
	if m != nil {
		return m.MisesList
	}
	return nil
}

func (m *RestQueryUserRelationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type RestQueryAppRequest struct {
	MisesAppid string `protobuf:"bytes,1,opt,name=mises_appid,json=misesAppid,proto3" json:"mises_appid,omitempty"`
}

func (m *RestQueryAppRequest) Reset()         { *m = RestQueryAppRequest{} }
func (m *RestQueryAppRequest) String() string { return proto.CompactTextString(m) }
func (*RestQueryAppRequest) ProtoMessage()    {}
func (*RestQueryAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{7}
}
func (m *RestQueryAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryAppRequest.Merge(m, src)
}
func (m *RestQueryAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryAppRequest proto.InternalMessageInfo

func (m *RestQueryAppRequest) GetMisesAppid() string {
	if m != nil {
		return m.MisesAppid
	}
	return ""
}

type RestQueryAppResponse struct {
	PubInfo *PublicAppInfo `protobuf:"bytes,1,opt,name=pub_info,json=pubInfo,proto3" json:"pub_info,omitempty"`
}

func (m *RestQueryAppResponse) Reset()         { *m = RestQueryAppResponse{} }
func (m *RestQueryAppResponse) String() string { return proto.CompactTextString(m) }
func (*RestQueryAppResponse) ProtoMessage()    {}
func (*RestQueryAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{8}
}
func (m *RestQueryAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryAppResponse.Merge(m, src)
}
func (m *RestQueryAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryAppResponse proto.InternalMessageInfo

func (m *RestQueryAppResponse) GetPubInfo() *PublicAppInfo {
	if m != nil {
		return m.PubInfo
	}
	return nil
}

type RestQueryAppFeeGrantRequest struct {
	MisesAppid string `protobuf:"bytes,1,opt,name=mises_appid,json=misesAppid,proto3" json:"mises_appid,omitempty"`
	MisesUid   string `protobuf:"bytes,2,opt,name=mises_uid,json=misesUid,proto3" json:"mises_uid,omitempty"`
}

func (m *RestQueryAppFeeGrantRequest) Reset()         { *m = RestQueryAppFeeGrantRequest{} }
func (m *RestQueryAppFeeGrantRequest) String() string { return proto.CompactTextString(m) }
func (*RestQueryAppFeeGrantRequest) ProtoMessage()    {}
func (*RestQueryAppFeeGrantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{9}
}
func (m *RestQueryAppFeeGrantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryAppFeeGrantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryAppFeeGrantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryAppFeeGrantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryAppFeeGrantRequest.Merge(m, src)
}
func (m *RestQueryAppFeeGrantRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryAppFeeGrantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryAppFeeGrantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryAppFeeGrantRequest proto.InternalMessageInfo

func (m *RestQueryAppFeeGrantRequest) GetMisesAppid() string {
	if m != nil {
		return m.MisesAppid
	}
	return ""
}

func (m *RestQueryAppFeeGrantRequest) GetMisesUid() string {
	if m != nil {
		return m.MisesUid
	}
	return ""
}

type RestQueryAppFeeGrantResponse struct {
	Grant *AppFeeGrant `protobuf:"bytes,1,opt,name=grant,proto3" json:"grant,omitempty"`
}

func (m *RestQueryAppFeeGrantResponse) Reset()         { *m = RestQueryAppFeeGrantResponse{} }
func (m *RestQueryAppFeeGrantResponse) String() string { return proto.CompactTextString(m) }
func (*RestQueryAppFeeGrantResponse) ProtoMessage()    {}
func (*RestQueryAppFeeGrantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2297eb53b474b55, []int{10}
}
func (m *RestQueryAppFeeGrantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestQueryAppFeeGrantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestQueryAppFeeGrantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestQueryAppFeeGrantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestQueryAppFeeGrantResponse.Merge(m, src)
}
func (m *RestQueryAppFeeGrantResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestQueryAppFeeGrantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestQueryAppFeeGrantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestQueryAppFeeGrantResponse proto.InternalMessageInfo

func (m *RestQueryAppFeeGrantResponse) GetGrant() *AppFeeGrant {
	if m != nil {
		return m.Grant
	}
	return nil
}

func init() {
	proto.RegisterType((*RestQueryDidRequest)(nil), "misesid.misestm.v1beta1.RestQueryDidRequest")
	proto.RegisterType((*RestQueryDidResponse)(nil), "misesid.misestm.v1beta1.RestQueryDidResponse")
	proto.RegisterType((*RestQueryUserRequest)(nil), "misesid.misestm.v1beta1.RestQueryUserRequest")
	proto.RegisterType((*RestQueryUserResponse)(nil), "misesid.misestm.v1beta1.RestQueryUserResponse")
	proto.RegisterType((*RestQueryUserRelationRequest)(nil), "misesid.misestm.v1beta1.RestQueryUserRelationRequest")
	proto.RegisterType((*MisesID)(nil), "misesid.misestm.v1beta1.MisesID")
	proto.RegisterType((*RestQueryUserRelationResponse)(nil), "misesid.misestm.v1beta1.RestQueryUserRelationResponse")
	proto.RegisterType((*RestQueryAppRequest)(nil), "misesid.misestm.v1beta1.RestQueryAppRequest")
	proto.RegisterType((*RestQueryAppResponse)(nil), "misesid.misestm.v1beta1.RestQueryAppResponse")
	proto.RegisterType((*RestQueryAppFeeGrantRequest)(nil), "misesid.misestm.v1beta1.RestQueryAppFeeGrantRequest")
	proto.RegisterType((*RestQueryAppFeeGrantResponse)(nil), "misesid.misestm.v1beta1.RestQueryAppFeeGrantResponse")
}

func init() { proto.RegisterFile("misestm/v1beta1/rest_query.proto", fileDescriptor_c2297eb53b474b55) }

var fileDescriptor_c2297eb53b474b55 = []byte{
	// 740 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xc7, 0xe9, 0x12, 0x60, 0x77, 0xf6, 0xf7, 0x4b, 0x74, 0xf8, 0x23, 0x16, 0xa8, 0x6b, 0x43,
	0x90, 0x18, 0x68, 0x05, 0x84, 0x83, 0x17, 0xb3, 0x48, 0x96, 0x90, 0x68, 0xa2, 0x4d, 0x38, 0x88,
	0x89, 0xa4, 0xa5, 0xb3, 0x75, 0x92, 0xdd, 0x76, 0xe8, 0x4c, 0x09, 0xc4, 0x83, 0x89, 0xaf, 0xc0,
	0xc4, 0xa3, 0x1e, 0xb8, 0xfa, 0x4e, 0x38, 0x92, 0x78, 0xf1, 0x68, 0xc0, 0x17, 0x62, 0x3a, 0x33,
	0xed, 0xce, 0x16, 0x56, 0xca, 0xad, 0x7f, 0x9e, 0xe7, 0xfb, 0x7c, 0x9e, 0x79, 0xbe, 0x4f, 0x0b,
	0x1a, 0x5d, 0x4c, 0x11, 0x65, 0x5d, 0xfb, 0x68, 0xc5, 0x43, 0xcc, 0x5d, 0xb1, 0x63, 0x44, 0xd9,
	0xfe, 0x61, 0x82, 0xe2, 0x13, 0x8b, 0xc4, 0x11, 0x8b, 0xe0, 0x3d, 0x1e, 0x81, 0x7d, 0x4b, 0x46,
	0x5a, 0x32, 0x52, 0x9f, 0x0d, 0xa2, 0x28, 0xe8, 0x20, 0xdb, 0x25, 0xd8, 0x76, 0xc3, 0x30, 0x62,
	0x2e, 0xc3, 0x51, 0x48, 0x45, 0x9a, 0xfe, 0xf8, 0x20, 0xa2, 0xdd, 0x88, 0xda, 0x9e, 0x4b, 0x91,
	0xcd, 0xf5, 0xf2, 0x12, 0xc4, 0x0d, 0x70, 0xc8, 0x83, 0x65, 0xec, 0xc3, 0x22, 0xc4, 0x16, 0xf6,
	0x1d, 0x14, 0x60, 0xca, 0x32, 0x0a, 0xdd, 0x28, 0x86, 0xec, 0x52, 0x14, 0xef, 0x84, 0xed, 0x48,
	0xbe, 0x37, 0xaf, 0x7b, 0xef, 0xa0, 0x8e, 0x5a, 0x66, 0xae, 0x18, 0xd3, 0x24, 0x44, 0x91, 0x98,
	0xbb, 0xf6, 0x28, 0xd8, 0xb1, 0x78, 0x6d, 0x3e, 0x01, 0xe3, 0x0e, 0xa2, 0xec, 0x4d, 0xda, 0x0a,
	0xe7, 0x3b, 0x4c, 0x10, 0x65, 0xf0, 0x3e, 0xa8, 0xf2, 0xbc, 0x7d, 0xec, 0x4f, 0x6b, 0x0d, 0x6d,
	0xb1, 0xe6, 0x8c, 0xf1, 0xfb, 0x1d, 0xdf, 0x7c, 0x0f, 0x26, 0xfa, 0x33, 0x28, 0x89, 0x42, 0x8a,
	0x60, 0x0b, 0xd4, 0xfd, 0x5e, 0x83, 0x3c, 0xab, 0xbe, 0x3a, 0x6f, 0x0d, 0x38, 0x67, 0x4b, 0x39,
	0x0c, 0x47, 0x4d, 0x34, 0xd7, 0x14, 0x7d, 0xd1, 0xae, 0x40, 0x9a, 0x01, 0x35, 0x81, 0x94, 0xe4,
	0x4c, 0x82, 0x71, 0x17, 0xfb, 0xe6, 0xa9, 0x06, 0x26, 0x0b, 0x59, 0x12, 0x6b, 0x13, 0x54, 0x49,
	0xe2, 0xed, 0xe3, 0xb0, 0x1d, 0x49, 0xa6, 0x47, 0x03, 0x99, 0x5e, 0x27, 0x5e, 0x07, 0x1f, 0x64,
	0x33, 0x70, 0xc6, 0x48, 0xe2, 0xa5, 0x17, 0xf0, 0x05, 0xa8, 0x92, 0x18, 0x0b, 0x8d, 0x0a, 0xd7,
	0x58, 0x1c, 0xac, 0x11, 0xe3, 0x23, 0x97, 0x21, 0x45, 0x24, 0xc6, 0xe9, 0x85, 0xf9, 0x4d, 0x03,
	0xb3, 0x05, 0x44, 0x31, 0xc7, 0x32, 0x0d, 0xc2, 0x29, 0x30, 0xda, 0xc6, 0x1d, 0x86, 0x62, 0x0e,
	0x50, 0x73, 0xe4, 0x1d, 0x6c, 0x01, 0xd0, 0x33, 0xde, 0xf4, 0x30, 0x87, 0x5b, 0xb0, 0x84, 0x4b,
	0xad, 0xd4, 0xa5, 0x96, 0x70, 0x7d, 0x8e, 0xe7, 0x06, 0x48, 0x16, 0x74, 0x94, 0x4c, 0x73, 0x1e,
	0x8c, 0xbd, 0xe2, 0x03, 0xde, 0xfa, 0xd7, 0xec, 0x7f, 0x68, 0x60, 0x6e, 0x40, 0x0f, 0xf2, 0xb8,
	0x9f, 0x03, 0x20, 0x92, 0x3b, 0x98, 0xb2, 0x69, 0xad, 0x31, 0xbc, 0x58, 0x5f, 0x6d, 0x0c, 0x3c,
	0x2c, 0x59, 0xd2, 0x11, 0x8d, 0xbf, 0xc4, 0x94, 0xc1, 0xed, 0xbe, 0x86, 0x2a, 0x72, 0x62, 0x37,
	0x35, 0x24, 0xaa, 0xf7, 0x75, 0xb4, 0xa1, 0x38, 0xbb, 0x49, 0x48, 0x76, 0xca, 0x0f, 0x40, 0x5d,
	0x00, 0xba, 0x84, 0xe4, 0x0d, 0x0a, 0xe6, 0x66, 0xfa, 0xc4, 0x7c, 0xab, 0xf8, 0x8f, 0xe7, 0xc9,
	0xce, 0x9a, 0x57, 0x8c, 0xb4, 0x70, 0x83, 0x91, 0xe4, 0x22, 0xe6, 0x3e, 0x32, 0xdf, 0x81, 0x19,
	0x55, 0xba, 0x85, 0xd0, 0x76, 0xec, 0x86, 0xac, 0x2c, 0x5a, 0xbf, 0x43, 0x2a, 0x85, 0x15, 0xd8,
	0x53, 0xec, 0xd5, 0x27, 0x2e, 0xf9, 0x9f, 0x81, 0x91, 0x20, 0x7d, 0x70, 0xe3, 0x66, 0xaa, 0xc9,
	0x22, 0x65, 0xf5, 0x6c, 0x04, 0xd4, 0x72, 0x71, 0xf8, 0x11, 0x54, 0xb3, 0xed, 0x87, 0x4b, 0x03,
	0x65, 0xae, 0xf9, 0xac, 0xe8, 0xcb, 0x25, 0xa3, 0x05, 0xb2, 0x09, 0x3f, 0xff, 0xfc, 0xf3, 0xb5,
	0xf2, 0x1f, 0x04, 0x36, 0x0f, 0xb7, 0x7d, 0xec, 0xc3, 0x4f, 0xa0, 0x96, 0xbb, 0x0f, 0x96, 0xd0,
	0x53, 0x3e, 0x21, 0xba, 0x55, 0x36, 0x5c, 0xd6, 0x1f, 0xe7, 0xf5, 0xff, 0x87, 0x75, 0x59, 0x3f,
	0x49, 0x6b, 0x9e, 0x6a, 0xe0, 0xee, 0x15, 0xff, 0xc3, 0xf5, 0xb2, 0xd2, 0x7d, 0x3b, 0xaf, 0x6f,
	0xdc, 0x36, 0x4d, 0x92, 0xcd, 0x72, 0xb2, 0x29, 0x38, 0xa1, 0x90, 0xd9, 0x71, 0x06, 0x93, 0x0d,
	0xa8, 0x49, 0x48, 0x99, 0x01, 0xf5, 0xb6, 0xa3, 0xcc, 0x80, 0x94, 0x9d, 0xb8, 0x32, 0x20, 0x97,
	0x10, 0xf8, 0x5d, 0x03, 0x77, 0x8a, 0x26, 0x84, 0x4f, 0x4b, 0xe9, 0x16, 0x16, 0x42, 0x5f, 0xbf,
	0x65, 0x96, 0xa4, 0x9a, 0xe1, 0x54, 0x93, 0x70, 0xbc, 0x47, 0x65, 0xb7, 0x11, 0xe2, 0x56, 0xde,
	0x6c, 0x9d, 0x5d, 0x18, 0xda, 0xf9, 0x85, 0xa1, 0xfd, 0xbe, 0x30, 0xb4, 0x2f, 0x97, 0xc6, 0xd0,
	0xf9, 0xa5, 0x31, 0xf4, 0xeb, 0xd2, 0x18, 0xda, 0x5b, 0x0a, 0x30, 0xfb, 0x90, 0x78, 0xd6, 0x41,
	0xd4, 0x15, 0x89, 0xcb, 0xd8, 0x97, 0x17, 0xac, 0x6b, 0x1f, 0xdb, 0xd9, 0x8f, 0x94, 0x9d, 0x10,
	0x44, 0xbd, 0x51, 0xfe, 0xff, 0x5c, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x66, 0xec, 0xfd,
	0x6b, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RestQueryClient is the client API for RestQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RestQueryClient interface {
	// query a did
	QueryDid(ctx context.Context, in *RestQueryDidRequest, opts ...grpc.CallOption) (*RestQueryDidResponse, error)
	// query a user info
	QueryUser(ctx context.Context, in *RestQueryUserRequest, opts ...grpc.CallOption) (*RestQueryUserResponse, error)
	// query user relations
	QueryUserRelation(ctx context.Context, in *RestQueryUserRelationRequest, opts ...grpc.CallOption) (*RestQueryUserRelationResponse, error)
	// query app info
	QueryApp(ctx context.Context, in *RestQueryAppRequest, opts ...grpc.CallOption) (*RestQueryAppResponse, error)
	// query app info
	QueryAppFeeGrant(ctx context.Context, in *RestQueryAppFeeGrantRequest, opts ...grpc.CallOption) (*RestQueryAppFeeGrantResponse, error)
}

type restQueryClient struct {
	cc grpc1.ClientConn
}

func NewRestQueryClient(cc grpc1.ClientConn) RestQueryClient {
	return &restQueryClient{cc}
}

func (c *restQueryClient) QueryDid(ctx context.Context, in *RestQueryDidRequest, opts ...grpc.CallOption) (*RestQueryDidResponse, error) {
	out := new(RestQueryDidResponse)
	err := c.cc.Invoke(ctx, "/misesid.misestm.v1beta1.RestQuery/QueryDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restQueryClient) QueryUser(ctx context.Context, in *RestQueryUserRequest, opts ...grpc.CallOption) (*RestQueryUserResponse, error) {
	out := new(RestQueryUserResponse)
	err := c.cc.Invoke(ctx, "/misesid.misestm.v1beta1.RestQuery/QueryUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restQueryClient) QueryUserRelation(ctx context.Context, in *RestQueryUserRelationRequest, opts ...grpc.CallOption) (*RestQueryUserRelationResponse, error) {
	out := new(RestQueryUserRelationResponse)
	err := c.cc.Invoke(ctx, "/misesid.misestm.v1beta1.RestQuery/QueryUserRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restQueryClient) QueryApp(ctx context.Context, in *RestQueryAppRequest, opts ...grpc.CallOption) (*RestQueryAppResponse, error) {
	out := new(RestQueryAppResponse)
	err := c.cc.Invoke(ctx, "/misesid.misestm.v1beta1.RestQuery/QueryApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restQueryClient) QueryAppFeeGrant(ctx context.Context, in *RestQueryAppFeeGrantRequest, opts ...grpc.CallOption) (*RestQueryAppFeeGrantResponse, error) {
	out := new(RestQueryAppFeeGrantResponse)
	err := c.cc.Invoke(ctx, "/misesid.misestm.v1beta1.RestQuery/QueryAppFeeGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestQueryServer is the server API for RestQuery service.
type RestQueryServer interface {
	// query a did
	QueryDid(context.Context, *RestQueryDidRequest) (*RestQueryDidResponse, error)
	// query a user info
	QueryUser(context.Context, *RestQueryUserRequest) (*RestQueryUserResponse, error)
	// query user relations
	QueryUserRelation(context.Context, *RestQueryUserRelationRequest) (*RestQueryUserRelationResponse, error)
	// query app info
	QueryApp(context.Context, *RestQueryAppRequest) (*RestQueryAppResponse, error)
	// query app info
	QueryAppFeeGrant(context.Context, *RestQueryAppFeeGrantRequest) (*RestQueryAppFeeGrantResponse, error)
}

// UnimplementedRestQueryServer can be embedded to have forward compatible implementations.
type UnimplementedRestQueryServer struct {
}

func (*UnimplementedRestQueryServer) QueryDid(ctx context.Context, req *RestQueryDidRequest) (*RestQueryDidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDid not implemented")
}
func (*UnimplementedRestQueryServer) QueryUser(ctx context.Context, req *RestQueryUserRequest) (*RestQueryUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUser not implemented")
}
func (*UnimplementedRestQueryServer) QueryUserRelation(ctx context.Context, req *RestQueryUserRelationRequest) (*RestQueryUserRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserRelation not implemented")
}
func (*UnimplementedRestQueryServer) QueryApp(ctx context.Context, req *RestQueryAppRequest) (*RestQueryAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryApp not implemented")
}
func (*UnimplementedRestQueryServer) QueryAppFeeGrant(ctx context.Context, req *RestQueryAppFeeGrantRequest) (*RestQueryAppFeeGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAppFeeGrant not implemented")
}

func RegisterRestQueryServer(s grpc1.Server, srv RestQueryServer) {
	s.RegisterService(&_RestQuery_serviceDesc, srv)
}

func _RestQuery_QueryDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestQueryDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestQueryServer).QueryDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/misesid.misestm.v1beta1.RestQuery/QueryDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestQueryServer).QueryDid(ctx, req.(*RestQueryDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestQuery_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestQueryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestQueryServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/misesid.misestm.v1beta1.RestQuery/QueryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestQueryServer).QueryUser(ctx, req.(*RestQueryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestQuery_QueryUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestQueryUserRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestQueryServer).QueryUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/misesid.misestm.v1beta1.RestQuery/QueryUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestQueryServer).QueryUserRelation(ctx, req.(*RestQueryUserRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestQuery_QueryApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestQueryAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestQueryServer).QueryApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/misesid.misestm.v1beta1.RestQuery/QueryApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestQueryServer).QueryApp(ctx, req.(*RestQueryAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestQuery_QueryAppFeeGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestQueryAppFeeGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestQueryServer).QueryAppFeeGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/misesid.misestm.v1beta1.RestQuery/QueryAppFeeGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestQueryServer).QueryAppFeeGrant(ctx, req.(*RestQueryAppFeeGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RestQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "misesid.misestm.v1beta1.RestQuery",
	HandlerType: (*RestQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryDid",
			Handler:    _RestQuery_QueryDid_Handler,
		},
		{
			MethodName: "QueryUser",
			Handler:    _RestQuery_QueryUser_Handler,
		},
		{
			MethodName: "QueryUserRelation",
			Handler:    _RestQuery_QueryUserRelation_Handler,
		},
		{
			MethodName: "QueryApp",
			Handler:    _RestQuery_QueryApp_Handler,
		},
		{
			MethodName: "QueryAppFeeGrant",
			Handler:    _RestQuery_QueryAppFeeGrant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "misestm/v1beta1/rest_query.proto",
}

func (m *RestQueryDidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryDidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryDidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MisesId) > 0 {
		i -= len(m.MisesId)
		copy(dAtA[i:], m.MisesId)
		i = encodeVarintRestQuery(dAtA, i, uint64(len(m.MisesId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestQueryDidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryDidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryDidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DidRegistry != nil {
		{
			size, err := m.DidRegistry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRestQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestQueryUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MisesUid) > 0 {
		i -= len(m.MisesUid)
		copy(dAtA[i:], m.MisesUid)
		i = encodeVarintRestQuery(dAtA, i, uint64(len(m.MisesUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestQueryUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PriInfo != nil {
		{
			size, err := m.PriInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRestQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PubInfo != nil {
		{
			size, err := m.PubInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRestQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestQueryUserRelationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryUserRelationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryUserRelationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRestQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintRestQuery(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MisesUid) > 0 {
		i -= len(m.MisesUid)
		copy(dAtA[i:], m.MisesUid)
		i = encodeVarintRestQuery(dAtA, i, uint64(len(m.MisesUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MisesID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MisesID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MisesID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MisesId) > 0 {
		i -= len(m.MisesId)
		copy(dAtA[i:], m.MisesId)
		i = encodeVarintRestQuery(dAtA, i, uint64(len(m.MisesId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestQueryUserRelationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryUserRelationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryUserRelationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRestQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MisesList) > 0 {
		for iNdEx := len(m.MisesList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MisesList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRestQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RestQueryAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MisesAppid) > 0 {
		i -= len(m.MisesAppid)
		copy(dAtA[i:], m.MisesAppid)
		i = encodeVarintRestQuery(dAtA, i, uint64(len(m.MisesAppid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestQueryAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubInfo != nil {
		{
			size, err := m.PubInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRestQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestQueryAppFeeGrantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryAppFeeGrantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryAppFeeGrantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MisesUid) > 0 {
		i -= len(m.MisesUid)
		copy(dAtA[i:], m.MisesUid)
		i = encodeVarintRestQuery(dAtA, i, uint64(len(m.MisesUid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MisesAppid) > 0 {
		i -= len(m.MisesAppid)
		copy(dAtA[i:], m.MisesAppid)
		i = encodeVarintRestQuery(dAtA, i, uint64(len(m.MisesAppid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestQueryAppFeeGrantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestQueryAppFeeGrantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestQueryAppFeeGrantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Grant != nil {
		{
			size, err := m.Grant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRestQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRestQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovRestQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RestQueryDidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MisesId)
	if l > 0 {
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *RestQueryDidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DidRegistry != nil {
		l = m.DidRegistry.Size()
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *RestQueryUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MisesUid)
	if l > 0 {
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *RestQueryUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubInfo != nil {
		l = m.PubInfo.Size()
		n += 1 + l + sovRestQuery(uint64(l))
	}
	if m.PriInfo != nil {
		l = m.PriInfo.Size()
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *RestQueryUserRelationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MisesUid)
	if l > 0 {
		n += 1 + l + sovRestQuery(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovRestQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *MisesID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MisesId)
	if l > 0 {
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *RestQueryUserRelationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MisesList) > 0 {
		for _, e := range m.MisesList {
			l = e.Size()
			n += 1 + l + sovRestQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *RestQueryAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MisesAppid)
	if l > 0 {
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *RestQueryAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubInfo != nil {
		l = m.PubInfo.Size()
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *RestQueryAppFeeGrantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MisesAppid)
	if l > 0 {
		n += 1 + l + sovRestQuery(uint64(l))
	}
	l = len(m.MisesUid)
	if l > 0 {
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func (m *RestQueryAppFeeGrantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Grant != nil {
		l = m.Grant.Size()
		n += 1 + l + sovRestQuery(uint64(l))
	}
	return n
}

func sovRestQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRestQuery(x uint64) (n int) {
	return sovRestQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RestQueryDidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryDidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryDidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MisesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestQueryDidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryDidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryDidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidRegistry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidRegistry == nil {
				m.DidRegistry = &DidRegistry{}
			}
			if err := m.DidRegistry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestQueryUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisesUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MisesUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestQueryUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubInfo == nil {
				m.PubInfo = &PublicUserInfo{}
			}
			if err := m.PubInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PriInfo == nil {
				m.PriInfo = &PrivateUserInfo{}
			}
			if err := m.PriInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestQueryUserRelationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryUserRelationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryUserRelationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisesUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MisesUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MisesID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MisesID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MisesID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MisesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestQueryUserRelationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryUserRelationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryUserRelationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisesList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MisesList = append(m.MisesList, &MisesID{})
			if err := m.MisesList[len(m.MisesList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestQueryAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisesAppid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MisesAppid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestQueryAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubInfo == nil {
				m.PubInfo = &PublicAppInfo{}
			}
			if err := m.PubInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestQueryAppFeeGrantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryAppFeeGrantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryAppFeeGrantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisesAppid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MisesAppid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisesUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MisesUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestQueryAppFeeGrantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestQueryAppFeeGrantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestQueryAppFeeGrantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grant == nil {
				m.Grant = &AppFeeGrant{}
			}
			if err := m.Grant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRestQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRestQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRestQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRestQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRestQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRestQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRestQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRestQuery = fmt.Errorf("proto: unexpected end of group")
)
