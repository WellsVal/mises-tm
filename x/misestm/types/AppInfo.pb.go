// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: misestm/AppInfo.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AppInfo struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid,proto3" json:"appid,omitempty"`
	Domain    string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Developer string `protobuf:"bytes,6,opt,name=developer,proto3" json:"developer,omitempty"`
	IconDid   string `protobuf:"bytes,7,opt,name=iconDid,proto3" json:"iconDid,omitempty"`
	IconThumb string `protobuf:"bytes,8,opt,name=iconThumb,proto3" json:"iconThumb,omitempty"`
	Quota     uint64 `protobuf:"varint,9,opt,name=quota,proto3" json:"quota,omitempty"`
	Version   uint64 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *AppInfo) Reset()         { *m = AppInfo{} }
func (m *AppInfo) String() string { return proto.CompactTextString(m) }
func (*AppInfo) ProtoMessage()    {}
func (*AppInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e87f77556be7852c, []int{0}
}
func (m *AppInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppInfo.Merge(m, src)
}
func (m *AppInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppInfo proto.InternalMessageInfo

func (m *AppInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *AppInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppInfo) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *AppInfo) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *AppInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppInfo) GetDeveloper() string {
	if m != nil {
		return m.Developer
	}
	return ""
}

func (m *AppInfo) GetIconDid() string {
	if m != nil {
		return m.IconDid
	}
	return ""
}

func (m *AppInfo) GetIconThumb() string {
	if m != nil {
		return m.IconThumb
	}
	return ""
}

func (m *AppInfo) GetQuota() uint64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *AppInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*AppInfo)(nil), "misesid.misestm.misestm.AppInfo")
}

func init() { proto.RegisterFile("misestm/AppInfo.proto", fileDescriptor_e87f77556be7852c) }

var fileDescriptor_e87f77556be7852c = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xeb, 0x92, 0x26, 0xc4, 0x03, 0x83, 0x55, 0xc0, 0x42, 0xc8, 0xaa, 0x98, 0x3a, 0x40,
	0x32, 0xf0, 0x04, 0x20, 0x84, 0xc4, 0x5a, 0x31, 0xb1, 0x25, 0xb1, 0x49, 0x2d, 0xe1, 0x9c, 0x49,
	0x9c, 0x0a, 0xde, 0x82, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x92, 0xc7, 0x60, 0x41, 0xbe, 0x24, 0x30,
	0xf9, 0xff, 0x3f, 0xdf, 0x9d, 0x7e, 0xfd, 0xf4, 0xd8, 0xe8, 0x46, 0x35, 0xce, 0xa4, 0x37, 0xd6,
	0x3e, 0x54, 0xcf, 0x90, 0xd8, 0x1a, 0x1c, 0xb0, 0x53, 0xc4, 0x5a, 0x26, 0xe3, 0xf7, 0xf4, 0x9e,
	0x2d, 0x4b, 0x28, 0x01, 0x67, 0x52, 0xaf, 0x86, 0xf1, 0x8b, 0x1f, 0x42, 0xa3, 0xf1, 0x00, 0xe3,
	0x34, 0x2a, 0x6a, 0x95, 0x39, 0xa8, 0x39, 0x59, 0x91, 0x75, 0xbc, 0x99, 0x2c, 0x3b, 0xa2, 0x73,
	0x2d, 0xf9, 0x7c, 0x45, 0xd6, 0xc1, 0x66, 0xae, 0x25, 0x5b, 0xd2, 0x45, 0x66, 0xad, 0x96, 0xfc,
	0x00, 0xe7, 0x06, 0xc3, 0x4e, 0x68, 0x28, 0xc1, 0x64, 0xba, 0xe2, 0x01, 0xe2, 0xd1, 0x31, 0x46,
	0x83, 0x2a, 0x33, 0x8a, 0x2f, 0x90, 0xa2, 0x66, 0xe7, 0x34, 0x96, 0x6a, 0xa7, 0x5e, 0xc0, 0xaa,
	0x9a, 0x87, 0xf8, 0xf1, 0x0f, 0x7c, 0x12, 0x5d, 0x40, 0x75, 0xa7, 0x25, 0x8f, 0x86, 0x24, 0xa3,
	0xf5, 0x7b, 0x5e, 0x3e, 0x6e, 0x5b, 0x93, 0xf3, 0xc3, 0x61, 0xef, 0x0f, 0xf8, 0x5c, 0xaf, 0x2d,
	0xb8, 0x8c, 0xc7, 0x18, 0x75, 0x30, 0xfe, 0xda, 0x4e, 0xd5, 0x8d, 0x86, 0x8a, 0x53, 0xe4, 0x93,
	0xbd, 0xbd, 0xff, 0xec, 0x04, 0xd9, 0x77, 0x82, 0x7c, 0x77, 0x82, 0x7c, 0xf4, 0x62, 0xb6, 0xef,
	0xc5, 0xec, 0xab, 0x17, 0xb3, 0xa7, 0xcb, 0x52, 0xbb, 0x6d, 0x9b, 0x27, 0x05, 0x98, 0x14, 0x1b,
	0xbc, 0xd2, 0x72, 0x14, 0xce, 0xa4, 0x6f, 0xe9, 0x54, 0xbe, 0x7b, 0xb7, 0xaa, 0xc9, 0x43, 0x2c,
	0xf3, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xba, 0x7b, 0x18, 0x94, 0x01, 0x00, 0x00,
}

func (m *AppInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintAppInfo(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x50
	}
	if m.Quota != 0 {
		i = encodeVarintAppInfo(dAtA, i, uint64(m.Quota))
		i--
		dAtA[i] = 0x48
	}
	if len(m.IconThumb) > 0 {
		i -= len(m.IconThumb)
		copy(dAtA[i:], m.IconThumb)
		i = encodeVarintAppInfo(dAtA, i, uint64(len(m.IconThumb)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IconDid) > 0 {
		i -= len(m.IconDid)
		copy(dAtA[i:], m.IconDid)
		i = encodeVarintAppInfo(dAtA, i, uint64(len(m.IconDid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Developer) > 0 {
		i -= len(m.Developer)
		copy(dAtA[i:], m.Developer)
		i = encodeVarintAppInfo(dAtA, i, uint64(len(m.Developer)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAppInfo(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintAppInfo(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Appid) > 0 {
		i -= len(m.Appid)
		copy(dAtA[i:], m.Appid)
		i = encodeVarintAppInfo(dAtA, i, uint64(len(m.Appid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintAppInfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintAppInfo(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAppInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovAppInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovAppInfo(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovAppInfo(uint64(m.Id))
	}
	l = len(m.Appid)
	if l > 0 {
		n += 1 + l + sovAppInfo(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovAppInfo(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAppInfo(uint64(l))
	}
	l = len(m.Developer)
	if l > 0 {
		n += 1 + l + sovAppInfo(uint64(l))
	}
	l = len(m.IconDid)
	if l > 0 {
		n += 1 + l + sovAppInfo(uint64(l))
	}
	l = len(m.IconThumb)
	if l > 0 {
		n += 1 + l + sovAppInfo(uint64(l))
	}
	if m.Quota != 0 {
		n += 1 + sovAppInfo(uint64(m.Quota))
	}
	if m.Version != 0 {
		n += 1 + sovAppInfo(uint64(m.Version))
	}
	return n
}

func sovAppInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAppInfo(x uint64) (n int) {
	return sovAppInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconThumb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconThumb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			m.Quota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAppInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAppInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAppInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAppInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAppInfo = fmt.Errorf("proto: unexpected end of group")
)
