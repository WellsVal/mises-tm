// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: misestm/v1beta1/UserInfo.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrivateUserInfo struct {
	EncData string `protobuf:"bytes,1,opt,name=enc_data,json=encData,proto3" json:"enc_data,omitempty"`
	Iv      string `protobuf:"bytes,2,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (m *PrivateUserInfo) Reset()         { *m = PrivateUserInfo{} }
func (m *PrivateUserInfo) String() string { return proto.CompactTextString(m) }
func (*PrivateUserInfo) ProtoMessage()    {}
func (*PrivateUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc21210aa0f700db, []int{0}
}
func (m *PrivateUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateUserInfo.Merge(m, src)
}
func (m *PrivateUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *PrivateUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateUserInfo proto.InternalMessageInfo

func (m *PrivateUserInfo) GetEncData() string {
	if m != nil {
		return m.EncData
	}
	return ""
}

func (m *PrivateUserInfo) GetIv() string {
	if m != nil {
		return m.Iv
	}
	return ""
}

type PublicUserInfo struct {
	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Gender      string   `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	AvatarUrl   string   `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	HomePageUrl string   `protobuf:"bytes,4,opt,name=home_page_url,json=homePageUrl,proto3" json:"home_page_url,omitempty"`
	Emails      []string `protobuf:"bytes,5,rep,name=emails,proto3" json:"emails,omitempty"`
	Telephones  []string `protobuf:"bytes,6,rep,name=telephones,proto3" json:"telephones,omitempty"`
	Intro       string   `protobuf:"bytes,7,opt,name=intro,proto3" json:"intro,omitempty"`
}

func (m *PublicUserInfo) Reset()         { *m = PublicUserInfo{} }
func (m *PublicUserInfo) String() string { return proto.CompactTextString(m) }
func (*PublicUserInfo) ProtoMessage()    {}
func (*PublicUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc21210aa0f700db, []int{1}
}
func (m *PublicUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicUserInfo.Merge(m, src)
}
func (m *PublicUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *PublicUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PublicUserInfo proto.InternalMessageInfo

func (m *PublicUserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PublicUserInfo) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *PublicUserInfo) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *PublicUserInfo) GetHomePageUrl() string {
	if m != nil {
		return m.HomePageUrl
	}
	return ""
}

func (m *PublicUserInfo) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *PublicUserInfo) GetTelephones() []string {
	if m != nil {
		return m.Telephones
	}
	return nil
}

func (m *PublicUserInfo) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

type UserInfo struct {
	Creator string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Uid     string           `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	PubInfo *PublicUserInfo  `protobuf:"bytes,4,opt,name=pub_info,json=pubInfo,proto3" json:"pub_info,omitempty"`
	PriInfo *PrivateUserInfo `protobuf:"bytes,5,opt,name=pri_info,json=priInfo,proto3" json:"pri_info,omitempty"`
	Version uint64           `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc21210aa0f700db, []int{2}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *UserInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserInfo) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserInfo) GetPubInfo() *PublicUserInfo {
	if m != nil {
		return m.PubInfo
	}
	return nil
}

func (m *UserInfo) GetPriInfo() *PrivateUserInfo {
	if m != nil {
		return m.PriInfo
	}
	return nil
}

func (m *UserInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*PrivateUserInfo)(nil), "misesid.misestm.v1beta1.PrivateUserInfo")
	proto.RegisterType((*PublicUserInfo)(nil), "misesid.misestm.v1beta1.PublicUserInfo")
	proto.RegisterType((*UserInfo)(nil), "misesid.misestm.v1beta1.UserInfo")
}

func init() { proto.RegisterFile("misestm/v1beta1/UserInfo.proto", fileDescriptor_cc21210aa0f700db) }

var fileDescriptor_cc21210aa0f700db = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x3d, 0x6f, 0xd4, 0x40,
	0x10, 0x3d, 0xdf, 0x87, 0x7d, 0x99, 0x88, 0x80, 0x56, 0x51, 0x30, 0x48, 0x58, 0xd1, 0x35, 0xa4,
	0x00, 0x5b, 0x81, 0x96, 0x2a, 0x20, 0x24, 0xba, 0xd3, 0x49, 0x69, 0x68, 0x4e, 0x6b, 0x7b, 0xe2,
	0x1b, 0xc9, 0xde, 0xb5, 0xd6, 0x6b, 0x0b, 0xfe, 0x05, 0x3f, 0x8b, 0x06, 0x29, 0x25, 0x25, 0xba,
	0xab, 0xf8, 0x17, 0xc8, 0xe3, 0x75, 0x44, 0x8a, 0xeb, 0xe6, 0xbd, 0x79, 0xf3, 0x76, 0xdf, 0xec,
	0x42, 0x54, 0x51, 0x83, 0x8d, 0xad, 0x92, 0xee, 0x3a, 0x45, 0x2b, 0xaf, 0x93, 0xdb, 0x06, 0xcd,
	0x17, 0x75, 0xa7, 0xe3, 0xda, 0x68, 0xab, 0xc5, 0x73, 0xee, 0x53, 0x1e, 0x3b, 0x5d, 0xec, 0x74,
	0x2f, 0xcf, 0x0b, 0x5d, 0x68, 0xd6, 0x24, 0x7d, 0x35, 0xc8, 0x57, 0x1f, 0xe0, 0xe9, 0xda, 0x50,
	0x27, 0x2d, 0x8e, 0x3e, 0xe2, 0x05, 0x2c, 0x51, 0x65, 0xdb, 0x5c, 0x5a, 0x19, 0x7a, 0x97, 0xde,
	0xd5, 0xc9, 0x26, 0x40, 0x95, 0x7d, 0x92, 0x56, 0x8a, 0x33, 0x98, 0x52, 0x17, 0x4e, 0x99, 0x9c,
	0x52, 0xb7, 0xfa, 0xe5, 0xc1, 0xd9, 0xba, 0x4d, 0x4b, 0xca, 0x1e, 0xa6, 0x05, 0xcc, 0x95, 0xac,
	0xd0, 0x4d, 0x72, 0x2d, 0x2e, 0xc0, 0x2f, 0x50, 0xe5, 0x68, 0xdc, 0xa8, 0x43, 0xe2, 0x15, 0x80,
	0xec, 0xa4, 0x95, 0x66, 0xdb, 0x9a, 0x32, 0x9c, 0x71, 0xef, 0x64, 0x60, 0x6e, 0x4d, 0x29, 0x56,
	0xf0, 0x64, 0xa7, 0x2b, 0xdc, 0xd6, 0xb2, 0x40, 0x56, 0xcc, 0x59, 0x71, 0xda, 0x93, 0x6b, 0x59,
	0x60, 0xaf, 0xb9, 0x00, 0x1f, 0x2b, 0x49, 0x65, 0x13, 0x2e, 0x2e, 0x67, 0xbd, 0xf5, 0x80, 0x44,
	0x04, 0x60, 0xb1, 0xc4, 0x7a, 0xa7, 0x15, 0x36, 0xa1, 0xcf, 0xbd, 0xff, 0x18, 0x71, 0x0e, 0x0b,
	0x52, 0xd6, 0xe8, 0x30, 0x60, 0xcf, 0x01, 0xac, 0xfe, 0x7a, 0xb0, 0x7c, 0x48, 0x12, 0x42, 0x90,
	0x19, 0x94, 0x56, 0x9b, 0x71, 0x0d, 0x0e, 0xf2, 0x1a, 0x72, 0xce, 0x32, 0xdf, 0x4c, 0x29, 0x17,
	0xcf, 0x60, 0xd6, 0x52, 0xee, 0x02, 0xf4, 0xa5, 0xb8, 0x81, 0x65, 0xdd, 0xa6, 0x5b, 0x52, 0x77,
	0x9a, 0x6f, 0x7d, 0xfa, 0xee, 0x75, 0x7c, 0xe4, 0x61, 0xe2, 0xc7, 0x0b, 0xdc, 0x04, 0x75, 0x9b,
	0xf2, 0xf9, 0x1f, 0x61, 0x59, 0x1b, 0x1a, 0x3c, 0x16, 0xec, 0x71, 0x75, 0xdc, 0xe3, 0xf1, 0x1b,
	0x6e, 0x82, 0xda, 0xd0, 0x18, 0xa2, 0x43, 0xd3, 0x90, 0x56, 0xa1, 0xcf, 0xf7, 0x1d, 0xe1, 0xcd,
	0xe7, 0x9f, 0xfb, 0xc8, 0xbb, 0xdf, 0x47, 0xde, 0x9f, 0x7d, 0xe4, 0xfd, 0x38, 0x44, 0x93, 0xfb,
	0x43, 0x34, 0xf9, 0x7d, 0x88, 0x26, 0x5f, 0xdf, 0x14, 0x64, 0x77, 0x6d, 0x1a, 0x67, 0xba, 0x4a,
	0xf8, 0xa0, 0xb7, 0x94, 0xbb, 0xc2, 0x56, 0xc9, 0xb7, 0x64, 0xfc, 0x81, 0xf6, 0x7b, 0x8d, 0x4d,
	0xea, 0xf3, 0x47, 0x7a, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x49, 0x43, 0x83, 0xa6, 0x99, 0x02,
	0x00, 0x00,
}

func (m *PrivateUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Iv) > 0 {
		i -= len(m.Iv)
		copy(dAtA[i:], m.Iv)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.Iv)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncData) > 0 {
		i -= len(m.EncData)
		copy(dAtA[i:], m.EncData)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.EncData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublicUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Telephones) > 0 {
		for iNdEx := len(m.Telephones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Telephones[iNdEx])
			copy(dAtA[i:], m.Telephones[iNdEx])
			i = encodeVarintUserInfo(dAtA, i, uint64(len(m.Telephones[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Emails) > 0 {
		for iNdEx := len(m.Emails) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Emails[iNdEx])
			copy(dAtA[i:], m.Emails[iNdEx])
			i = encodeVarintUserInfo(dAtA, i, uint64(len(m.Emails[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.HomePageUrl) > 0 {
		i -= len(m.HomePageUrl)
		copy(dAtA[i:], m.HomePageUrl)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.HomePageUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AvatarUrl) > 0 {
		i -= len(m.AvatarUrl)
		copy(dAtA[i:], m.AvatarUrl)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.AvatarUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintUserInfo(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if m.PriInfo != nil {
		{
			size, err := m.PriInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PubInfo != nil {
		{
			size, err := m.PubInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintUserInfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrivateUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncData)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	l = len(m.Iv)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	return n
}

func (m *PublicUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	l = len(m.AvatarUrl)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	l = len(m.HomePageUrl)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	if len(m.Emails) > 0 {
		for _, s := range m.Emails {
			l = len(s)
			n += 1 + l + sovUserInfo(uint64(l))
		}
	}
	if len(m.Telephones) > 0 {
		for _, s := range m.Telephones {
			l = len(s)
			n += 1 + l + sovUserInfo(uint64(l))
		}
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovUserInfo(uint64(m.Id))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	if m.PubInfo != nil {
		l = m.PubInfo.Size()
		n += 1 + l + sovUserInfo(uint64(l))
	}
	if m.PriInfo != nil {
		l = m.PriInfo.Size()
		n += 1 + l + sovUserInfo(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovUserInfo(uint64(m.Version))
	}
	return n
}

func sovUserInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserInfo(x uint64) (n int) {
	return sovUserInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrivateUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emails = append(m.Emails, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephones = append(m.Telephones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubInfo == nil {
				m.PubInfo = &PublicUserInfo{}
			}
			if err := m.PubInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PriInfo == nil {
				m.PriInfo = &PrivateUserInfo{}
			}
			if err := m.PriInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserInfo = fmt.Errorf("proto: unexpected end of group")
)
